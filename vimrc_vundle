"=============================== my auto header =================================
    let my_auto_header_tmplate = "~/.vim/my_template.txt"
    let my_auto_white_list = ["cpp", "c", "h", "go", "py"]
    let my_python_list = ["py"]
    let my_auto_ext = expand('%:e')
    augroup myAutoGroup
        au!
        au bufnewfile * if index(my_python_list, expand('%:e')) >= 0 | let my_auto_header_tmplate ="~/.vim/my_template.txt.py"
        au bufnewfile * if index(my_auto_white_list, expand('%:e')) >= 0 | exe "so ".my_auto_header_tmplate
        au bufnewfile * if index(my_auto_white_list, expand('%:e')) >= 0 | exe "1," . 10 . "g/Creation Date :.*/s//Creation Date : ".strftime("%d-%m-%Y %H:%M:%S")
        au bufnewfile * if index(my_auto_white_list, expand('%:e')) >= 0 | exe "1," . 10 . "g/File Name :.*/s//File Name : ".expand("%:t")
        try
            au Bufwritepre,filewritepre * if index(my_auto_white_list, expand('%:e')) >= 0 | exe "normal ma"
            au Bufwritepre,filewritepre * if index(my_auto_white_list, expand('%:e')) >= 0 | exe "1,".10."g/Last Modified :.*/s/Last Modified :.*/Last Modified : ".strftime("%d-%m-%Y %H:%M:%S")
            au bufwritepost,filewritepost * if index(my_auto_white_list, expand('%:e')) > 0 | exe "normal `a"
            au bufwritepost,filewritepost * if index(my_auto_white_list, expand('%:e')) >= 0 | exe "normal <c-o>"
        catch  
            echom expand("%")."may not has a auto header"
        endtry
    augroup END
"================================================================================

"============================== syntastic ======================================
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_python_checkers = ["pyflakes"] "['pylint']

    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic error location panel
            Errors
        endif
    endfunction
    nnoremap <Leader>e :call ToggleErrors()<cr>
"================================================================================

"============================== NERD_Tree config ===============================
    nnoremap <silent> <F6> : NERDTree<CR>
    let NERDTreeIgnore = ['\.o$', '\.pyc$']
    let NERDTreeShowBookmarks=1
    let NRRDTreeChristmasTree=1
    "auto NERDTree when start vim
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Startify | NERDTree | wincmd w | endif
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    "==================================nerdtree_tab config =============================
    "let g:nerdtree_tabs_open_on_console_startup=1       "设置打开vim的时候默认打开目录树
    "===================================================================================
"===============================================================================

"====================== vim-cpp-enhanced-highlight ===============================
    let g:cpp_class_scope_highlight = 1
    let g:cpp_experimental_template_highlight = 1
"=================================================================================

"================================ a.vim config  ==================================
    noremap  <leader>a  : A<CR>
    inoremap <leader>a  : A<CR>
"=================================================================================

"==================================== startify.vim config ============================
    let g:startify_change_to_dir = 0 "open file from startify do not change dir
"=====================================================================================

"==================================== vim-javascript ==============================
    let g:javascript_plugin_jsdoc = 1
    let g:javascript_plugin_ngdoc = 1
"==================================================================================

"=================================== YCM config ===================================
    let g:ycm_confirm_extra_conf = 0 "open file with confim .ycm_extra_conf.py
    let g:ycm_goto_buffer_command = 'horizontal-split'
    let g:ycm_open_loclist_on_ycm_diags = 1 
    let g:ycm_global_ycm_extra_conf='~/.vim/ycm_extra_conf.py' 
    let g:ycm_echo_current_diagnostic = 1
    "let g:ycm_seed_identifiers_with_syntax = 1
    "let g:ycm_always_populate_location_list = 1
    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_string = 1
    let g:ycm_autoclose_preview_window_after_completion=1
    let g:ycm_python_binary_path = '/usr/local/bin/python'
    "let g:ycm_cache_omnifunc=0
    nnoremap <leader>g :YcmCompleter GoTo<CR>
    nnoremap <leader>f :YcmForceCompileAndDiagnostics<CR>
    "nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
    "nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
    "nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"==================================================================================
"
"====================================== ctrlp =======================================
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_clear_cache_on_exit = 0 
    if executable("ag")
        set grepprg=ag\ --nogroup\ --nocolor "also make vim faster!
        let g:ctrlp_user_command='ag %s -l -g "" --nocolor --path-to-agignore ~/.agignore'
    endif
    nnoremap <C-p>m :CtrlPMRU<CR> "most recenty files use CtrlPMRU
    let g:ctrlp_cache_dir = '.ctrlp_cache'
"====================================================================================

"================================= indent-guid ======================================
    "let g:indent_guides_guide_size=1
    "let g:indent_guides_auto_colors = 0
    "let g:indent_guides_enable_on_vim_startup=0
    "let g:indent_guides_start_level=2
    "hi IndentGuidesOdd  ctermbg=darkgrey
    "hi IndentGuidesEven ctermbg=102
    "autocmd VimEnter,Colorscheme * :IndentGuidesToggle
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=darkgrey 
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=102
    "let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
"====================================================================================

"================================= indentline =================================
    let g:indentLine_enabled = 1
    let g:indentLine_char = '¦' 
    "let g:indentLine_first_char = ' '
    let g:indentLine_color_term = 109
    "let g:indentLine_showFirstIndentLevel = 1
    let g:indentLine_fileTypeExclude = ['text', 'help']
    set list lcs=tab:\¦\ 
    "let g:indentLine_faster = 1
"==============================================================================

"================================= ack.vim =====================================
    if executable('ag')
        let g:ackprg = 'ag --vimgrep --path-to-agignore ~/.agignore'
    endif
    noremap <Leader>s :Ack <cword><cr>
"===================================================================================

"================================= vim-go"=====================================
    let g:go_template_autocreate = 0 
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
"==================================================================================

"================================= vim-polyglot =============================
let g:polyglot_disabled = ['markdown'] 
"================================================================================

"================================== vim-airline ================================
    "let g:airline_theme='cool'
"==================================================================================

"============================== Vundle Config =============================
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin() "also call vundle#begin('~/some/path/here')

    Plugin 'VundleVim/Vundle.vim'
    Plugin 'tpope/vim-fugitive'
    "Plugin 'git://git.wincent.com/command-t.git' "Git plugin not hosted on GitHub

    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'kien/ctrlp.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'fatih/vim-go'
    Plugin 'mileszs/ack.vim'
    Plugin 'vim-scripts/a.vim'
    Plugin 'flazz/vim-colorschemes'
    Plugin 'asins/vimcdoc'
    "Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'yggdroot/indentline'
    Plugin 'mhinz/vim-startify'
    Plugin 'rdnetto/YCM-Generator'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'octol/vim-cpp-enhanced-highlight'
    Plugin 'Shougo/vimproc.vim'
    Plugin 'Shougo/vimshell.vim'
    Plugin 'pangloss/vim-javascript'
    Plugin 'jistr/vim-nerdtree-tabs'
    Plugin 'sheerun/vim-polyglot'
    Plugin 'mhinz/vim-signify'      "show svn(or else) diff in vim
    Plugin 'airblade/vim-gitgutter' "show git diff/undo in vim as a gutter
    Plugin 'scrooloose/syntastic'
    Plugin 'jacoborus/tender'
    Plugin 'morhetz/gruvbox'
    Plugin 'jiangmiao/auto-pairs'

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line
"===========================================================================

"=================================== Common Config ==============================
    set cscopetag
    set hlsearch
    set ts=4
    set expandtab
    set shiftwidth=4
    set autoindent
    set nu
    set incsearch
    set nocp
    set foldenable
    set ruler                         " show the cursor position all the time
    set smartindent                   " smart autoindentnig when starting a new line
    set wildignore=*.bak,*.o,*.e,*~   " wildmenu:ignore these extensions
    set fdm=indent                    " use space to indent 
    set nowrap                        " not auto wrap
    set breakindent

    set encoding=utf-8
    set fileencodings=utf-bom,utf-8,cp936,gb18030,latin1
    language message zh_CN.utf-8
    set guifont=Consolas:h12:cANSI

    let g:gruvbox_italic=1
    let g:molokai_original=1

    filetype plugin indent on
    syntax on 
    set t_Co=256
    "set tgc
    "colorscheme molokai 
    "colorscheme zenburn 
    "colorscheme gruvbox
    "colorscheme solarized 
    colorscheme lucius 
    "colorscheme tender 
    "colorscheme jellybeans
    let g:airline_theme = 'tender'
    "let g:lightline = { 'colorscheme': 'tender' }

    set background=dark

    nnoremap <leader><Space> :tabnext<CR>

"================================================================================


